cfree is a simple C mini-library that can help detecting and fixing memory leaks.
It has been developped in 2012 by Alan "Shtark" Schneider <shk.schneider[at]gmail.com>
It is released under the GNU GPLv2+.

In cfree.h are included some defines:
# define malloc(x) cmalloc(x, __FUNCTION__, __FILE__, __LINE__)
# define realloc(p, x) crealloc(p, x, __FUNCTION__, __FILE__, __LINE__)
# define calloc(n, x) ccalloc(n, x, __FUNCTION__, __FILE__, __LINE__)
# define free(x) cfree(x)

So you don't need to change all your code to debug with libcfree.
This is actually greatly simplified:
1. include cfree.h in all C file that calls malloc() or free()
  #include <cfree.h>
2. call cfree_check() everytime you wish to inspect memory leaks
  Alternatively you could define a macro like this one:
  #define exit(x) cfree_check(); exit(x);
3. include libcfree at linking
  gcc -L/path/ -lcfree *.o -o a.out

Here is an example main.c:
#include <stdlib.h>
#include "cfree.h"
int main(void) {
  char * p1, * p2, * p3;
  p1 = malloc(sizeof(char) * 10);
  p2 = malloc(sizeof(char) * 20);
  p3 = malloc(sizeof(char) * 30);
  free(p3);
  free(p2);
  //free(p1);
  cfree_check();
  return (0);
}

Here is the output from cfree_check():
==9238==
==9238== MEMORY LEAK DETECTED ==9238==
==9238==   Unfree'd alloc: 1
==9238==     10 B at 0x13c0010 from main.c:main() l.8
==9238==   Total memory lost: 10 B
==9238== MEMORY_LEAK_DETECTED ==9238==
==9238==
==9238== cfree: 3 alloc (3 malloc, 0 realloc, 0 calloc), 2 free

10 B have been lost in 1 missing free.
Those bytes have been alloc'd in function main(), file: main.c, line: 8

Happy hunting!
